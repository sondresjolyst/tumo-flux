apiVersion: batch/v1
kind: Job
metadata:
  name: vault-transit-bootstrap
  namespace: vault-transit
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: bootstrap
          image: alpine:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e

              apk add --no-cache curl jq bash ca-certificates

              echo "📥 Installing kubectl..."
              KUBE_VERSION=$(curl -s https://dl.k8s.io/release/stable.txt)
              curl -LO "https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubectl"
              chmod +x kubectl && mv kubectl /usr/local/bin/

              echo "⬇️ Installing Vault CLI..."
              echo "$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vault)"
              FOO=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vault)
              echo "$(echo $FOO | jq -r '.current_version'")"
              VAULT_VERSION=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vault | jq -r '.current_version')

              echo "Using Vault version: https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip"
              curl -L -o vault.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
              unzip -j vault.zip vault
              chmod +x vault && mv vault /usr/local/bin/

              export VAULT_ADDR=http://vault.vault-transit.svc:8200

              echo "🔐 Bootstrapping Vault Transit..."

              until vault status -format=json | jq -e '.initialized == false' > /dev/null; do
                echo "Waiting for Vault to be reachable..." && sleep 2
              done

              vault operator init -format=json -key-shares=5 -key-threshold=3 > /tmp/init.json

              for i in 0 1 2; do
                vault operator unseal $(jq -r ".unseal_keys_b64[$i]" /tmp/init.json)
              done

              export VAULT_TOKEN=$(jq -r ".root_token" /tmp/init.json)

              vault secrets enable transit
              vault write -f transit/keys/autounseal

              vault policy write autounseal - <<EOF
              path "transit/encrypt/autounseal" { capabilities = ["update"] }
              path "transit/decrypt/autounseal" { capabilities = ["update"] }
              EOF

              TOKEN=$(vault token create -policy=autounseal -period=8760h -format=json | jq -r '.auth.client_token')

              kubectl delete secret vault-b-unseal-token -n vault --ignore-not-found
              kubectl create secret generic vault-b-unseal-token -n vault --from-literal=token="$TOKEN"

              echo "✅ Done."
          env:
            - name: VAULT_ADDR
              value: http://vault.vault-transit.svc:8200
